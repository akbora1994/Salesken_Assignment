package com.salesken.services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.salesken.exception.StudentNotFoundException;
import com.salesken.model.MarksDTO;
import com.salesken.model.Semester;
import com.salesken.model.Student;
import com.salesken.repository.StudentRepo;

@Service
public class StudentServiceImpl implements StudentService {

	@Autowired
	private StudentRepo sRepo;

	@Override
	public Student createStudent(Student student) throws StudentNotFoundException {
		
		if(student != null) {
			
			Semester first = new Semester(1, 0, 0, 0);
			Semester second = new Semester(2, 0, 0, 0);
			student.getSemesters().add(first);
			student.getSemesters().add(second);
			return sRepo.save(student);
		}
		else {
			throw new StudentNotFoundException("Please fill the details!");
		}
			
		
	}

	@Override
	public void addMarks(Integer studentId, Semester semester) {
		
		Student student = sRepo.findById(studentId)
				.orElseThrow(() -> new RuntimeException("Student not found with the id: " + studentId));

		student.getSemesters().get(semester.getId() - 1).setEnglish(semester.getEnglish());
		student.getSemesters().get(semester.getId() - 1).setMaths(semester.getMaths());
		student.getSemesters().get(semester.getId() - 1).setScience(semester.getScience());

		sRepo.save(student);
	}

	@Override
	public MarksDTO averagePercentage(Integer semesterId) {
		
		List<Student> students = sRepo.findAll();
		int english = 0;
		int science = 0;
		int maths = 0;
		
		int totalStudents = students.size();
		for (int i = 0; i < students.size(); i++) {
			english += students.get(i).getSemesters().get(semesterId - 1).getEnglish();
			maths += students.get(i).getSemesters().get(semesterId - 1).getMaths();
			science += students.get(i).getSemesters().get(semesterId - 1).getScience();
		}
		
		int totalMarksScored = english + maths + science;
		int totalMarks = totalStudents * 300;

		Double percentage = ((double) totalMarksScored / totalMarks) * 100;

		MarksDTO avgPerc = new MarksDTO();
		avgPerc.setEnglish((double) english / totalStudents);
		avgPerc.setMaths((double) maths / totalStudents);
		avgPerc.setScience((double) science / totalStudents);
		avgPerc.setAveragePercentile(percentage);
		return avgPerc;
	}

	@Override
	public List<Student> topTwoStudents() {
		
		List<Student> students = sRepo.findAll();
		Map<Integer, Student> map = new HashMap<>();
		System.out.println(students);
		
		for (int i = 0; i < students.size(); i++) {
			int sum = 0;
			sum += students.get(i).getSemesters().get(0).getEnglish();
			sum += students.get(i).getSemesters().get(0).getMaths();
			sum += students.get(i).getSemesters().get(0).getScience();
			sum += students.get(i).getSemesters().get(1).getEnglish();
			sum += students.get(i).getSemesters().get(1).getMaths();
			sum += students.get(i).getSemesters().get(1).getScience();
			map.put(sum, students.get(i));
		}

		Collection<Integer> c = map.keySet();

		List<Integer> list = new ArrayList<>(c);

		Collections.sort(list);

		List<Student> res = new ArrayList<>();

		int first = list.get(list.size() - 1);
		int second = list.get(list.size() - 2);

		for (Map.Entry<Integer, Student> m : map.entrySet()) {
			if (m.getKey() == first) {
				res.add(m.getValue());
			}
			if (m.getKey() == second) {
				res.add(m.getValue());
			}
		}

		return res;
	}
	
	
	public List<Student> getAllStudents() {
        try {
            Iterable<Student> students = sRepo.findAll();
            List<Student> studentList = new ArrayList<>();
            for (Student s : students) {
                studentList.add(s);
            }
            return studentList;
        } catch (Exception e) {
            System.out.println("erro : " + e.toString());
        }
        return new ArrayList<Student>();
    }


}
